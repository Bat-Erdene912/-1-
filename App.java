package org.example;

import org.example.achievement.AchievementTracker;
import org.example.organizer.*;
import java.util.*;
import java.io.*;

public class App {
    public static void main(String[] args) throws IOException {
        if (args.length == 0 || Arrays.asList(args).contains("--help")) {
            printHelp();
            return;
        }

        String path = args[0];
        String order = "random";
        int repetitions = 1;
        boolean invert = false;

        for (int i = 1; i < args.length; i++) {
            switch (args[i]) {
                case "--order": order = args[++i]; break;
                case "--repetitions": repetitions = Integer.parseInt(args[++i]); break;
                case "--invertCards": invert = true; break;
            }
        }

        FlashCardManager manager = new FlashCardManager();
        List<FlashCard> cards = manager.loadCards(path);

        CardOrganizer organizer = switch (order) {
            case "worst-first" -> (list) -> list.stream()
                    .sorted(Comparator.comparingInt(FlashCard::getWrongCount).reversed())
                    .toList();
            case "recent-mistakes-first" -> new RecentMistakesFirstSorter();
            default -> (list) -> {
                List<FlashCard> shuffled = new ArrayList<>(list);
                Collections.shuffle(shuffled);
                return shuffled;
            };
        };

        cards = organizer.organize(cards);
        Scanner sc = new Scanner(System.in);
        long startTime = System.currentTimeMillis();

        for (FlashCard card : cards) {
            int correctStreak = 0;
            while (correctStreak < repetitions) {
                System.out.println((invert ? card.getAnswer() : card.getQuestion()) + " ?");
                String input = sc.nextLine();
                String expected = invert ? card.getQuestion() : card.getAnswer();
                if (input.equalsIgnoreCase(expected)) {
                    System.out.println("‚úÖ –ó”©–≤!");
                    card.markCorrect();
                    correctStreak++;
                } else {
                    System.out.println("‚ùå –ë—É—Ä—É—É! –ó”©–≤ —Ö–∞—Ä–∏—É–ª—Ç: " + expected);
                    card.markWrong();
                }
            }
        }

        long duration = System.currentTimeMillis() - startTime;
        System.out.println("‚è± –ù–∏–π—Ç —Ö—É–≥–∞—Ü–∞–∞: " + duration / 1000.0 + " —Å–µ–∫—É–Ω–¥");

        AchievementTracker tracker = new AchievementTracker();
        tracker.evaluate(cards);
        tracker.getUnlocked().forEach(a -> System.out.println("üéâ –ê–º–∂–∏–ª—Ç: " + a));
    }

    private static void printHelp() {
        System.out.println("""
            –ê—à–∏–≥–ª–∞–ª—Ç: flashcard <cards-file> [options]

            Options:
              --help                    –¢—É—Å–ª–∞–º–∂–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª —Ö–∞—Ä—É—É–ª–∞—Ö
              --order <order>          –ö–∞—Ä—Ç—ã–Ω –¥–∞—Ä–∞–∞–ª–∞–ª [random|worst-first|recent-mistakes-first]
              --repetitions <num>      –ù—ç–≥ –∫–∞—Ä—Ç—ã–≥ —Ö—ç–¥—ç–Ω —É–¥–∞–∞ –∑”©–≤ —Ö–∞—Ä–∏—É–ª–∞—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π (default=1)
              --invertCards            –ê—Å—É—É–ª—Ç, —Ö–∞—Ä–∏—É–ª—Ç—ã–≥ —Å–æ–ª—å–∂ “Ø–∑“Ø“Ø–ª—ç—Ö
            """);
    }
}
